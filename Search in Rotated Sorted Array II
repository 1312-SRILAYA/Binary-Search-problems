class Solution:
    def search(self, arr: list[int], key: int) -> bool:
        n=len(arr)
        low=0
        high=n-1
        while(low<=high):
            mid=(low+high)//2
            if(arr[mid]==key):
                return True
            if(arr[low]==arr[mid]==arr[high]):
                low+=1
                high-=1
            elif(arr[low]<=arr[mid]):
                if(arr[low]<=key<=arr[mid]):
                    high=mid-1
                else:
                    low=mid+1
            elif(arr[mid]<=arr[high]):
                if(arr[mid]<=key<=arr[high]):
                    low=mid+1
                else:
                    high=mid-1
        return False

#Search in rotated sorted array
# binary search variation
# #User function Template for python3

class Solution:
    def search(self,nums,key):
        n=len(nums)
        low=0
        high=n-1
        while(low<=high):
            mid=(low+high)//2
            if(nums[mid]==key):
                return mid
            #left half is sorted
            elif(nums[low]<=nums[mid]):
                if(nums[low]<=key<=nums[mid]):
                    high=mid-1
                else:
                    low=mid+1
            #right half is sorted
            elif(nums[mid]<=nums[high]):
                if(nums[mid]<=key<=nums[high]):
                    low=mid+1
                else:
                    high=mid-1
        return -1  

